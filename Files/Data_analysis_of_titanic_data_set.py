# -*- coding: utf-8 -*-
"""DATA ANALYSIS OF TITANIC DATA SET.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JPrRtWS9v-gG__CYI77OrEW3TA89caVv
"""

import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

d=pd.read_csv("/content/drive/MyDrive/DPA/train.csv")
d.head(7)

d.tail()

print(d)

d.size

d.shape

d.isnull().sum()

d=d.drop(columns=['Name', 'Ticket', 'Cabin', 'Embarked'])
d.head(4)

d.describe()

d.isnull().sum()

#AGE                #Replacing nan values with mean values
from sklearn.impute import SimpleImputer
missingvalueimputer = SimpleImputer(missing_values = np.NaN, strategy = 'mean')
X=d.iloc[:,4].values
X=X.reshape(-1,1)
d.iloc[:,4] = missingvalueimputer.fit_transform(X)

d.isnull().sum()

d.head(7)

#GENDER               # Converting String to float
from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = d.iloc[:,3].values
X = X.reshape(-1,1)
d.iloc[:,3] = labelencoder.fit_transform(X)

d.head()

d.head(2)

X = d[['PassengerId' ,'Pclass' ,'Sex' ,'Age' ,'SibSp' ,'Parch' ,'Fare' ]]
y = d[['Survived']]

d = d[['PassengerId' ,'Pclass' ,'Sex' ,'Age' ,'SibSp' ,'Parch' ,'Fare' , 'Survived']]

d.head()

from sklearn.model_selection import train_test_split

X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.25)

print(train_test_split(X, y, test_size=0.25))

from sklearn.preprocessing import MinMaxScaler
mms = MinMaxScaler()
X_train_min= mms.fit_transform(X_train)
X_test_min = mms.transform(X_test)

from sklearn.preprocessing import StandardScaler
independent_scaler = StandardScaler()
X_train_norm = independent_scaler.fit_transform(X_train)
X_test_norm = independent_scaler.transform(X_test)

from sklearn.decomposition import PCA
pca = PCA(n_components =2)              # Convert All the columns into two components/columns
X_train_pca = pca.fit_transform(X_train_norm)
X_train_pca =pca.transform(X_train_norm)
X_test_pca = pca.fit_transform(X_test_norm)
X_test_pca =pca.transform(X_test_norm)
pca.explained_variance_ratio_

#KNN Algorithm MINMAX
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 6)
knn.fit(X_train_min , Y_train)

prediction =knn.predict(X_test_min)

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test, prediction)
print(accuracy)

from sklearn.metrics import classification_report

# from sklearn.metrics import accuracy_score
# accuracy = accuracy_score(Y_test, prediction)
# print(accuracy)

target_names = ['survived','not survived']
print(classification_report(Y_test, prediction.reshape(-1,1), target_names=target_names))
# Reshaping is done to convert the data alignment from horizontal to vertical as excel representation

from sklearn.metrics import classification_report ,confusion_matrix ,ConfusionMatrixDisplay

import matplotlib.pyplot as plt

cm = confusion_matrix(Y_test, prediction.reshape(-1,1), normalize='true')
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=target_names)
fig, ax = plt.subplots(figsize=(8,6))
disp.plot(ax=ax,cmap='Blues')

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt

#Logistic Regression MinMax
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report ,confusion_matrix ,ConfusionMatrixDisplay
lgr = LogisticRegression()
lgr.fit(X_train_min , Y_train)

prediction = lgr.predict(X_test_min)
from sklearn import metrics
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test,prediction)
print(accuracy)

target_names = ['survived','not survived']
print(classification_report(Y_test, prediction.reshape(-1,1), target_names=target_names))


cm = confusion_matrix(Y_test, prediction.reshape(-1,1), normalize='true')
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=target_names)
fig, ax = plt.subplots(figsize=(8,6))
disp.plot(ax=ax,cmap='Blues')

#SVM minmax
from sklearn.svm import SVC
svc = SVC()
svc.fit(X_train_min, Y_train)

prediction = svc.predict(X_test_min)
prediction

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test , prediction)
print(accuracy)

target_names = ['survived','not survived']
print(classification_report(Y_test, prediction.reshape(-1,1), target_names=target_names))

cm = confusion_matrix(Y_test, prediction.reshape(-1,1), normalize='true')
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=target_names)
fig, ax = plt.subplots(figsize=(8,6))
disp.plot(ax=ax,cmap='Blues')

#SVM pca
from sklearn.svm import SVC
svc = SVC()
svc.fit(X_train_pca, Y_train)

prediction = svc.predict(X_test_pca)
prediction

accuracy = accuracy_score(Y_test , prediction)
print(accuracy)

target_names = ['survived','not survived']
print(classification_report(Y_test, prediction.reshape(-1,1), target_names=target_names))

cm = confusion_matrix(Y_test, prediction.reshape(-1,1), normalize='true')
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=target_names)
fig, ax = plt.subplots(figsize=(8,6))
disp.plot(ax=ax,cmap='Blues')

"""# Naive Bias"""

#navbayes gaussian minmax
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train_min, Y_train)

prediction = model.predict(X_test_min)
prediction

accuracy = accuracy_score(Y_test, prediction)
print(accuracy)

target_names = ['survived','not survived']
print(classification_report(Y_test, prediction.reshape(-1,1), target_names=target_names))

cm = confusion_matrix(Y_test, prediction.reshape(-1,1), normalize='true')
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=target_names)
fig, ax = plt.subplots(figsize=(8,6))
disp.plot(ax=ax,cmap='Blues')

"""# Gaussian"""

#navbayes gaussian pca
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train_pca, Y_train)

prediction = model.predict(X_test_pca)
prediction

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test, prediction)
print(accuracy)

target_names = ['survived','not survived']
print(classification_report(Y_test, prediction.reshape(-1,1), target_names=target_names))

cm = confusion_matrix(Y_test, prediction.reshape(-1,1), normalize='true')
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=target_names)
fig, ax = plt.subplots(figsize=(8,6))
disp.plot(ax=ax,cmap='Blues')